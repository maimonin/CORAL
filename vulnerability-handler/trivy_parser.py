import json
import pandas as pd
from datetime import date
import subprocess
import os


def create_cve(trivy_json_file, output_path):
    """
    Extract relevant CVE information from Trivy JSON output and save it to a CSV file.

    Args:
    - trivy_json_file (str): Path to the Trivy JSON output file.
    - output_path (str): Directory path where the CSV file will be saved.
    """
    # Read Trivy JSON file
    vuln_json_file = open(trivy_json_file)
    trivy_dict = json.loads(vuln_json_file.read())

    # Initialize an empty DataFrame for CVE data
    df_vuln = pd.DataFrame(columns=['Pod-ID', 'Software', 'Version', 'CVE-ID', 'CVE-Severity', 'CVE-Title', 'CVSS'])

    # Extract relevant information from Trivy JSON
    findings_list = trivy_dict['Findings']
    for pod_vulns_dict in findings_list:
        if 'Namespace' in pod_vulns_dict.keys() and pod_vulns_dict['Namespace'] == 'default':
            if 'Results' in pod_vulns_dict:
                for res_dict in pod_vulns_dict['Results']:
                    if 'Vulnerabilities' in res_dict:
                        for vuln_dict in res_dict['Vulnerabilities']:
                            new_vuln_row = {
                                'Pod-ID': pod_vulns_dict['Name'],
                                'Software': vuln_dict['PkgName'],
                                'Version': vuln_dict['InstalledVersion'],
                                'CVE-ID': vuln_dict["VulnerabilityID"],
                                'CVE-Severity': vuln_dict["Severity"],
                                'CVE-Title': vuln_dict["Title"] if 'Title' in vuln_dict else None,
                                'CVSS': vuln_dict["CVSS"] if 'CVSS' in vuln_dict else None
                            }
                            df_vuln = pd.concat([df_vuln, pd.DataFrame([new_vuln_row])])

    # Save the CVE data to a CSV file
    df_vuln.to_csv(output_path, index=False)


def run_trivy(output_path):
    """
    Run Trivy security scanner on Kubernetes and save the results to a CSV file.

    Args:
        output_path (str): The directory path where the Trivy analysis result and the resulting CVE data CSV file will be saved.

    Raises:
        subprocess.CalledProcessError: Raised when the Trivy process execution fails.

    """
    # Define the path for the Trivy output file
    output_file_path = os.path.join(output_path, 'trivy_output_file')

    try:
        # Run Trivy command and save the output to a file
        with open(output_file_path, 'w') as output_file_handle:
            trivy_process = subprocess.run(
                ['sudo', 'trivy', 'k8s', '--report', 'summary', 'all', '--scanners',
                 'vuln', '--format', 'json'], check=True, stdout=output_file_handle, text=True)

        # Create a CSV file with CVE data from the Trivy output
        output_csv_full_path = os.path.join(output_path, f"cve_static_data_{date.today()}.csv")
        create_cve(output_file_path, output_csv_full_path)
        print(f"Shell command executed successfully. CVE data saved to {output_csv_full_path}")
    except subprocess.CalledProcessError as e:
        print("Error executing shell command:", e)


if __name__ == '__main__':
    custom_output_file_path = '/home/ubuntu/attack-graphs-/Demo/assets'
    run_trivy(custom_output_file_path)


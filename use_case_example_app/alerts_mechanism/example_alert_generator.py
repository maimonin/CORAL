import pandas as pd
import random


def generate_lateral_movement_alerts(processes_df, services_list, alerts_per_service):
    """
    Generates a DataFrame containing alerts of lateral movements based on the input processes associated with given services.
    Alerts are generated by simulating interactions between processes of different services.
    Each alert contains details such as the source and target services, the processes involved, the type of lateral movement, and a description.

    Args:
        processes_df (pd.DataFrame): A DataFrame containing process information. It must have columns  such as `svc` (service name) and `pid` (process ID).
        services_list (list[str]): A list of service names to monitor for lateral movements.
        alerts_per_service (dict[str, int]): A mapping of service names to the number of alerts to generate for each respective service.

    Returns:
        pd.DataFrame: A DataFrame containing generated lateral movement alerts.
                    Each alert includes the following columns:
                      - 'Source Service'
                      - 'Target Service'
                      - 'Source Process ID'
                      - 'Target Process ID'
                      - 'Alert Type'
                      - 'Description'
                      - 'Severity'
    """

    # Define a list of possible lateral movement alert types
    alert_types = [
        "Unexpected Remote Process Execution",
        "Anomalous Access Across Different Hosts",
        "Irregular Use of Administrative Tools",
        "Suspicious File Access Patterns Across Hosts",
        "Unusual Network Connections Following Privilege Escalation",
        "Abnormal Service or Daemon Activities"
    ]

    # Filter processes related to the specified services
    service_processes = processes_df[processes_df['svc'].isin(services_list)]

    # Generate alerts
    alerts = []
    for service in services_list:
        num_alerts = alerts_per_service.get(service, 0)
        source_processes = service_processes[service_processes['svc'] == service]
        for _ in range(num_alerts):
            if not source_processes.empty:
                # Randomly select a source process from the service
                process = source_processes.sample(n=1).iloc[0]
                # Randomly select a target service and process
                target_service = random.choice([s for s in services_list if s != service])
                target_processes = service_processes[service_processes['svc'] == target_service]
                if not target_processes.empty:
                    target_process = target_processes.sample(n=1).iloc[0]

                    alert = {
                        "Source Service": service,
                        "Target Service": target_service,
                        "Source Process ID": process["pid"],
                        "Target Process ID": target_process["pid"],
                        "Alert Type": random.choice(alert_types),
                        "Description": f"Lateral movement detected from {service} (PID: {process['pid']}) to {target_service} (PID: {target_process['pid']}).",
                        "Severity": "High"
                    }
                    alerts.append(alert)

    # Create a DataFrame for alerts
    alerts_df = pd.DataFrame(alerts)

    return alerts_df



if __name__ == "__main__":
    # Example usage:
    services_list = ['frontend', 'recommendationservice', 'adservice', 'cartservice']  # Specify the services here
    alerts_per_service = {'frontend': 5, 'recommendationservice': 3, 'adservice': 2, 'cartservice':4}  # Specify the number of alerts per service
    processes_df = pd.read_csv("../provenance_data/app_process.csv")  # Assuming provenance DataFrame named processes_df is available

    lateral_movement_alerts_df = generate_lateral_movement_alerts(processes_df, services_list, alerts_per_service)
    lateral_movement_alerts_df.to_csv("lateral_movement_example_alerts.csv", index=False)
